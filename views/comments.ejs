<!doctype html>
<html lang="en">

<head>
    <meta content="user-scalable=0, initial-scale=1,minimum-scale=1, maximum-scale=1, width=device-width, minimal-ui=1"
        name="viewport">
    </meta>
    <title>Visible Bottleneck</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
        href="https://fonts.googleapis.com/css2?family=Lato&family=Montserrat&family=Roboto+Slab:wght@700&display=swap"
        rel="stylesheet">
    <link href="/stylesheets/style.css" rel="stylesheet">
    <!-- Vue -->
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <!-- Bootstrap -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
</head>

<body>
    <%- include('partials/navbar'); %>
        <div id="app" class="container mb-5">
            <div class="row mt-3">
                <div class="d-flex flex-row-reverse">
                    <a href="/comments/add/" class="btn btn-outline-success" role="button">Add
                        comment</a>
                </div>
            </div>
            <div v-for="orderedComment in orderedComments" class="row comment-container mt-3">
                <div class="col-2">
                    <div class="comment-vote-container">
                        <button class="comment-vote-button" type="button"
                            @click="voteUp(orderedComment.id, orderedComment.votes)"><img
                                src="/icons/arrow-up-solid.svg"></button>
                        <span class="resource-vote-count-span">{{ orderedComment.votes }}</span>
                        <button class="comment-vote-button" type="button"
                            @click="voteDown(orderedComment.id, orderedComment.votes)"><img
                                src="/icons/arrow-down-solid.svg"></button>
                    </div>
                </div>
                <div class="col-10">
                    <div class="row">
                        <div class="col-8">posted by:
                            <span v-if="orderedComment.author">{{orderedComment.author}}</span>
                            <span v-else>anonymous</span>
                        </div>
                        <div class="col-4 text-end">
                            {{orderedComment.date}}
                        </div>
                        <hr>
                    </div>
                    <div v-html="orderedComment.content">
                    </div>
                </div>
            </div>
            <p>&nbsp;</p>

            <script>
                const { createApp } = Vue
                createApp({
                    data() {
                        return {
                            comments: [],
                        }
                    },
                    // Fetch the comments from the API.
                    async created() {
                        this.getComments();
                    },
                    computed: {
                        orderedComments() {
                            // Ordering by vote.
                            var orderedComments = this.comments.sort(({ votes: a }, { votes: b }) => b - a);
                            return orderedComments;
                        }
                    },
                    methods: {
                        async getComments() {
                            this.comments = await
                                fetch("/api/comments")
                                    .then(function (response) {
                                        return response.json();
                                    })
                                    .then(function (data) {
                                        return data;
                                    });
                        },
                        voteUp(commentId, commentVotes) {
                            // Check if user has already voted.
                            let hasVoted = localStorage.getItem("hasVoted-" + commentId);
                            if (!hasVoted) {
                                // Add one to the vote.
                                commentVotes++;
                                const requestOptions = {
                                    method: "PUT",
                                    headers: { "Content-Type": "application/json" },
                                    body: JSON.stringify({ votes: commentVotes })
                                };
                                fetch("/api/comments/votes/" + commentId + "/edit", requestOptions)
                                    .then(
                                        this.getComments()
                                    ).then(
                                        localStorage.setItem("hasVoted-" + commentId, true)
                                    );
                            }
                        },
                        voteDown(commentId, commentVotes) {
                            // Check if user has already voted.
                            let hasVoted = localStorage.getItem("hasVoted-" + commentId);
                            if (!hasVoted) {
                                // Subtract one from the vote.
                                commentVotes--;
                                const requestOptions = {
                                    method: "PUT",
                                    headers: { "Content-Type": "application/json" },
                                    body: JSON.stringify({ votes: commentVotes })
                                };
                                fetch("/api/comments/votes/" + commentId + "/edit", requestOptions).
                                    then(
                                        this.getComments()
                                    ).then(
                                        localStorage.setItem("hasVoted-" + commentId, true)
                                    );
                            }
                        },
                    }
                }).mount('#app')
            </script>
</body>

</html>